@using System.Net.Http.Json
@using System.IO
@using Newtonsoft.Json
@using System.Globalization
@inject IBillingService billingService

<h3 class="custom-title">Latest Billing</h3>

<table class="table table-root-custom">
    <thead class="cust-table-head">
        <tr>
            <th scope="col"><SortableLabelComponent IsActive="(globalSortKey == InvoicesSortKeys.ByName)? true : false" LabelName="PERIOD" SortMethod="SortResultsClick" SortKey="InvoicesSortKeys.ByName" SortType="!isAscending?SortTypes.Ascending: SortTypes.Descending" /></th>
            <th scope="col">BILLING</th>
            <th scope="col">APPROVED</th>
            <th scope="col">PAID</th>
            <th scope="col">BALANCE</th>
            <th scope="col" style="text-align:center">DETAILS</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var element in Elements)
        {
        <tr>
            <td style="font-weight: bold; color: #2E2E5E;">@element.PresentationPeriod</td>
            <td>@element.TotalBilling.ToString("C2", new CultureInfo("en-US"))</td> 
            <td>@element.TotalApproved.ToString("C2", new CultureInfo("en-US"))</td>
            <td>@element.TotalPaid.ToString("C2", new CultureInfo("en-US"))</td>
            <td>@element.TotalBalance.ToString("C2", new CultureInfo("en-US"))</td>
            <td style="text-align:center"><a href="#">View Invoices</a></td>

        </tr>
        }

    </tbody>
</table>

<div class="row" style="margin-top: 10px">
    <div class="offset-9 col-md-3">
        <ul class="pagination">
            @if (currentPage != 1)
            {
                <li class="page-item">
                    <a id="page-first" class="page-link" @onclick="@(async () => await navigateToPage(1))" @onclick:preventDefault>&lt;&lt;</a>
                </li>
            }
            else
            {
                <li class="page-item" style="pointer-events: none">
                    <span id="page-first" class="page-link">&lt;&lt;</span>
                </li>
            }
            @for (int count = startPage; count <= endPage; count++)
            {
                int tempPageNumber = count;
                if (count == pageNumber)
                {
                    <li class="page-item active">
                        <a id="page-@count" class="page-link" @onclick="@(async () => await navigateToPage(tempPageNumber))" @onclick:preventDefault>@count</a>
                    </li>
                }
                else
                {
                    <li class="page-item">
                        <a id="page-@count" class="page-link" @onclick="@(async () => await navigateToPage(tempPageNumber))" @onclick:preventDefault>@count</a>
                    </li>
                }
            }
            @if (currentPage != totalPages)
            {
                <li class="page-item">
                    <a id="page-last" class="page-link" @onclick="@(async () => await navigateToPage(totalPages))" @onclick:preventDefault>&gt;&gt;</a>
                </li>
            }
            else
            {
                <li class="page-item" style="pointer-events: none">
                    <span id="page-last" class="page-link">&gt;&gt;</span>
                </li>
            }
        </ul>
    </div>
</div>


@code {
    int pageSize;
    int currentPage;
    int pageNumber;
    int totalPages;
    int startPage;
    int endPage;

    bool isSort;
    bool isAscending;
    InvoicesSortKeys globalSortKey;
    SortTypes globalSortType;
    private IEnumerable<Bill> Elements;
    private Tuple<List<Bill>, int> Data;

    protected override async Task OnInitializedAsync()
    {//
        currentPage = currentPage == 0 ? 1 : currentPage;
        Console.WriteLine($"##### Current Page {currentPage}");
        pageSize = 2;
        Data = billingService.GetBillingsByPage(currentPage - 1, pageSize);

        totalPages = Data.Item2;
        Elements = Data.Item1;
        calculatePaging();

    }


    void calculatePaging()
    {
        Console.WriteLine($"##### Current Page {currentPage}");
        pageNumber = currentPage;
        totalPages = Convert.ToInt32(Data.Item2);
        startPage = pageNumber - 2;
        endPage = pageNumber + 2;

        if (startPage <= 0)
        {
            endPage -= (startPage - 1);
            startPage = 1;
        }
        if (endPage > totalPages)
        {
            endPage = totalPages;
            if (endPage > 5)
            {
                startPage = endPage - 4;
            }
        }
        Console.WriteLine($"######### Calculated Paging: StartPage {startPage} EndPage {endPage}");
    }

    async Task navigateToPage(int pageNumber)
    {
        currentPage = pageNumber;

        if (isSort)
        {
            SortResultsClick(globalSortKey, globalSortType, pageNumber);
        }
        else
        {
            await GetBillingData(pageNumber);
        }
    }

    async Task GetBillingData(int page)
    {
        Data = billingService.GetBillingsByPage(page - 1, pageSize);

        totalPages = Data.Item2;
        Elements = Data.Item1;
        calculatePaging();
        StateHasChanged();
    }

    void SortResultsClick(InvoicesSortKeys sortBy, SortTypes sortType, int page)
    {
        currentPage = page;
        isSort = true;
        globalSortKey = InvoicesSortKeys.ByName;
        globalSortType = sortType;

        isAscending = (sortType == SortTypes.Ascending) ? true : false;
        Data = billingService.SortBillingByPeriod(globalSortType, page - 1, pageSize);
        totalPages = Data.Item2;
        Elements = Data.Item1;
        calculatePaging();
        StateHasChanged();
    }
}
